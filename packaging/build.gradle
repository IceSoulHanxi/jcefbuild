import org.gradle.crypto.checksum.Checksum

plugins {
    id 'distribution'
    id "org.gradle.crypto.checksum" version "1.2.0"
}

// Checks in order: the environment, or a system property
def arch_dist="${System.env.ARCH_DIST ?: System.properties.ARCH_DIST}"
def artifact=file("${System.env.BIN_ARTIFACT ?: System.properties.BIN_ARTIFACT ?: "$bin_artifact"}/$arch_dist")

distributions {
    // Combines all the jars required for jcef to run
    jars {
        contents {
            from (fileTree("$artifact/bin")) {
                include '**/*.jar'
                exclude '**/jcef-tests.jar'
                eachFile {
                    relativePath new RelativePath(true, name)
                }
                caseSensitive = false
                includeEmptyDirs = false
            }

            into('readme') {
                from(artifact) {
                    include '*LICENSE.txt'
                    include 'README.txt'
                }
            }
        }
    }

    // Creates a collection of the javadocs
    docs {
        contents {
            from (fileTree("$artifact/docs")) {
                includeEmptyDirs = false
            }
        }
    }

    // Combines all the blobs as dictated in the README.txt
    blobs {
        contents {
            if (arch_dist.contains("linux")) {
                from (fileTree("$artifact/bin/lib/$arch_dist")) {
                    include 'libjcef.so', 'jcef_helper', 'libcef.so', 'icudtl.dat',
                            'natives_blob.bin', 'snapshot_blob.bin'
                    include 'locales/**/*'
                    include 'cef*.pak'
                    include 'devtools_resources.pak'
                }
            } else if (arch_dist.contains("macosx")) {
                from (fileTree("$artifact/bin/")) {
                    exclude '**/*.jar'
                }
            }
        }
    }
}

// Main task to run everything
task jcef(type: Zip) {
    dependsOn installBlobsDist
    dependsOn installJarsDist

    archiveBaseName = provider { "$arch_dist" }

    (dependsOn*.destinationDir).each { dest ->
        into (dest.name) {
            from(dest)
        }
    }
}

// Generate sha256 checksum of the output files
task jcefchecksum(type: Checksum) {
    dependsOn jcef
    files = jcef.outputs.files
    outputDir = file("$buildDir/distributions")
}

jcef.finalizedBy jcefchecksum

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '5.4.1'
}
