name: Publish Latest Releases

on:
  schedule:
#     - cron: '0 12 */2 * *'   # Every other day at 12pm
    - cron: '*/5 * * * *'    # Every other day at 12pm

jobs: 
  jcef-make-new-release: 
    runs-on: ubuntu-latest
    steps: 
      - name: "Checkout JCEF-BUILD"
        uses: actions/checkout@v1
        with: 
          path: jcef-build

      - name: "Checkout JCEF"
        run: "git clone https://github.com/chromiumembedded/java-cef jcef"
      
      - name: "Latest Published Release and Latest CEF Release"
        run: |
            echo "::set-env name=LATEST_BUILD_VERSION::$(git describe --tags --abbrev=0 | egrep -io '([0-9]+\.?){3}\+g\w+\+chromium-([0-9]+\.?){4}')"
            echo "::set-env name=LATEST_JCEF_VERSION::$($GITHUB_WORKSPACE/make-release-version.sh $GITHUB_WORKSPACE/jcef)"
        shell: bash

      - name: "Compare Versions"
        if: success()
        run: |
            #!python3
            import os
            from pkg_resources import parse_version
            build_version = os.environ.get('LATEST_BUILD_VERSION')
            jcef_version  = os.environ.get('LATEST_JCEF_VERSION')
            print (f"::set-env name=NEW_RELEASE::{int(parse_version(build_version) < parse_version(jcef_version))}")
        shell: python
      
      - name: "Create New Release"
        if: success()
        run: |-
            if [[ $NEW_RELEASE == '1' ]]; then
                export NEW_RELEASE_TAG="$(git describe --tags --abbrev=0 | egrep -io '^v([0-9]+\.?){3}')-$LATEST_JCEF_VERSION"
                echo "::debug ::NEW RELEASE: $NEW_RELEASE_TAG"
                read status < <(jq --null-input --compact-output '.tag_name=env.NEW_RELEASE_TAG | .name=env.NEW_RELEASE_TAG' \
                              | curl --url https://api.github.com/repos/${{ github.repository }}/releases \
                                     --header "Authorization: token ${{ secrets.TR_GITHUB_TOKEN }}" \
                                     --silent --show-error --write-out '\n%{http_code}' \
                                     --output /dev/stderr \
                                     --data '@-'
                )
                echo $status
                [[ "$status" == '201' ]]
            fi
        shell: bash
  
